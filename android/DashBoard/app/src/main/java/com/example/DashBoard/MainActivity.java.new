/**
 *  @version 1.0 (25.03.2016)
 *  @author Werner Joss
 *	derived from http://project-greengiant.googlecode.com/svn/trunk/Blog/Android Arduino Bluetooth/Android/AndroidArduinoBluetooth/src/Android/Arduino/Bluetooth/BluetoothTest.java
 *
 */

 package com.example.bt_showval;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.reflect.Method;
import java.util.Set;
import java.util.UUID;

import com.example.bt_showval.R;

import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.Intent;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

public class MainActivity extends Activity {
	private static final String TAG = "bt_showval";

	TextView StatusText;
	TextView DataText;

	BluetoothAdapter mBluetoothAdapter;
	BluetoothSocket mmSocket;
	BluetoothDevice mmDevice;
	OutputStream mmOutputStream;
	InputStream mmInputStream;
	Thread workerThread;
	byte[] readBuffer;
	int readBufferPosition;
	int counter;
	volatile boolean stopWorker;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		// TODO: force Landscape even if Dev is configured for screen rotation

		final Button openButton = (Button)findViewById(R.id.open);
		final Button closeButton = (Button)findViewById(R.id.close);
		StatusText = (TextView)findViewById(R.id.StatusText);
		DataText = (TextView)findViewById(R.id.DataText);
		StatusText.setText("No BT Device opened");

		//Open Button
		openButton.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				try {
					findBT();
					openBT();
					closeButton.setVisibility(View.VISIBLE);
					openButton.setVisibility(View.INVISIBLE);
				} catch (IOException ex) {
				}
			}
		});

		//Close button
		closeButton.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				try {
					closeBT();
					openButton.setVisibility(View.VISIBLE);
					closeButton.setVisibility(View.INVISIBLE);
				} catch (IOException ex) { }
			}
		});

		// startup defaults:
		closeButton.setVisibility(View.VISIBLE);
		closeButton.setVisibility(View.INVISIBLE);
	}

	void findBT() {
		mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
		if(mBluetoothAdapter == null) {
			StatusText.setText("No bluetooth adapter available");
		}

		// TODO: don't crash if BT is disabeled !
		if(!mBluetoothAdapter.isEnabled()) {
			Intent enableBluetooth = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
			startActivityForResult(enableBluetooth, 0);
		}

		// TODO: let user select Device from List of all Found Devices
		Set<BluetoothDevice> pairedDevices = mBluetoothAdapter.getBondedDevices();
		if(pairedDevices.size() > 0) {
			for(BluetoothDevice device : pairedDevices) {
				if(device.getName().equals("HC-05")) {
					mmDevice = device;
					break;
				}
			}
		}
		StatusText.setText("Bluetooth Device " + mmDevice.getName() + " Found");
	}

	void openBT() throws IOException {
		UUID uuid = UUID.fromString("00001101-0000-1000-8000-00805f9b34fb"); //Standard SerialPortService ID
		mmSocket = mmDevice.createRfcommSocketToServiceRecord(uuid);
		mmSocket.connect();
		mmOutputStream = mmSocket.getOutputStream();
		mmInputStream = mmSocket.getInputStream();
		StatusText.setText("Bluetooth " + mmDevice.getName() + " opened");

		beginListenForData();

	}

	void beginListenForData() {
		final Handler handler = new Handler();
		final byte delimiter = 10; //This is the ASCII code for a newline character

		stopWorker = false;
		readBufferPosition = 0;
		readBuffer = new byte[1024];
		workerThread = new Thread(new Runnable() {
			public void run() {
				while(!Thread.currentThread().isInterrupted() && !stopWorker) {
					try {
						int bytesAvailable = mmInputStream.available();
						if(bytesAvailable > 0) {
							byte[] packetBytes = new byte[bytesAvailable];
							mmInputStream.read(packetBytes);
							for(int i=0; i<bytesAvailable; i++) {
								byte b = packetBytes[i];
								if(b == delimiter) {
									byte[] encodedBytes = new byte[readBufferPosition];
									System.arraycopy(readBuffer, 0, encodedBytes, 0, encodedBytes.length);
									final String data = new String(encodedBytes, "US-ASCII");
									readBufferPosition = 0;

									handler.post(new Runnable() {
										public void run() {
											DataText.setText(data);
										}
									});
								} else {
									readBuffer[readBufferPosition++] = b;
								}
							}
						}
					} catch (IOException ex) {
						stopWorker = true;
					}
				}
			}
		});

		workerThread.start();
	}

	void closeBT() throws IOException {
		stopWorker = true;
		mmOutputStream.close();
		mmInputStream.close();
		mmSocket.close();
		StatusText.setText("Bluetooth Closed");
		DataText.setText("No Data");
	}
}